import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.ensemble import GradientBoostingRegressor
import joblib
import tensorflow as tf

# Load dataset
df = pd.read_csv("output_source.csv")

# Split into features and target
X = df[["UNIX_TIME", "DC_POWER"]]
y = df["ANGLE"]

# Split into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train GradientBoostingRegressor model
model = GradientBoostingRegressor(n_estimators=100, max_depth=5, learning_rate=0.1, random_state=42)
model.fit(X_train, y_train)

# Predict on test set
y_pred = model.predict(X_test)

# Calculate MSE and R-squared
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

# Print MSE and R-squared
print("MSE:", mse)
print("R-squared:", r2)

# Save model as a joblib file
joblib.dump(model, 'tflite.joblib')
model.save_model

# Convert model to tflite format
converter = tf.lite.TFLiteConverter.from_joblib(model)
tflite_model = converter.convert()
with open('tflite.tflite', 'wb') as f:
    f.write(tflite_model)
